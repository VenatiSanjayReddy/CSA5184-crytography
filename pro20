from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import base64

def encrypt_ecb_3des(key, plaintext):
    backend = default_backend()
    cipher = Cipher(algorithms.TripleDES(key), modes.ECB(), backend=backend)
    encryptor = cipher.encryptor()

    padder = padding.PKCS7(64).padder()
    padded_plaintext = padder.update(plaintext) + padder.finalize()

    ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()
    return ciphertext

def main():
    # 3DES key (24 bytes)
    key = b'your24bytestdeskeyhere'

    plaintext = b'This is a secret message.'

    ciphertext = encrypt_ecb_3des(key, plaintext)
    print("Ciphertext:", base64.b64encode(ciphertext).decode('utf-8'))

if __name__ == "__main__":
    main()
