from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import os

def encrypt_3des_cbc(key, iv, plaintext):
    backend = default_backend()
    cipher = Cipher(algorithms.TripleDES(key), modes.CBC(iv), backend=backend)
    encryptor = cipher.encryptor()
    
    padder = padding.PKCS7(algorithms.TripleDES.block_size).padder()
    padded_plaintext = padder.update(plaintext) + padder.finalize()
    
    ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()
    return ciphertext

def main():
    key = os.urandom(24)  # 3DES requires a 24-byte key
    iv = os.urandom(8)    # Initialization Vector (IV) should be the same size as the block size
    
    plaintext = b"This is a test message for 3DES CBC encryption."
    
    ciphertext = encrypt_3des_cbc(key, iv, plaintext)
    print("Ciphertext:", ciphertext.hex())

if __name__ == "__main__":
    main()
